turtle.remove()

boids = hatch 20
boids.plan -> 
  @moveto [100*random(normal),100*random(normal)]
  @rt [360*random(normal)]
  @wear '/img/Aviceda leuphotes', 50
speed Infinity

AvoidanceSense = (me, myBoids) ->
  threshold = 75
  combinedAngle = 0
  detectedBoids = 0
  for boid in myBoids
    distanceToBoid = me.distance(boid)
    if distanceToBoid > 0 and distanceToBoid < threshold
      combinedAngle += me.direction(boid) - me.direction()
      detectedBoids++
  newHeading = 
    if detectedBoids is 0
      me.direction() 
    else (combinedAngle/detectedBoids) + 180
  #me.label detectedBoids + ":" + (newHeading.toFixed 0), fontSize: 20, labelSide: 'bottom'
  return newHeading
  
CenterSense = (me, myBoids) ->
  threshold = 150
  combinedAngle = 0
  detectedBoids = 0
  for boid in myBoids
    distanceToBoid = me.distance(boid)
    if distanceToBoid > 0 and distanceToBoid < threshold
      combinedAngle += me.direction(boid) - me.direction()
      detectedBoids++
  newHeading = 
    if detectedBoids is 0
      me.direction() 
    else (combinedAngle/detectedBoids)
  #me.label detectedBoids + ":" + (newHeading.toFixed 0), fontSize: 20, labelSide: 'bottom'
  return newHeading

CopySense = (me, myBoids) ->
  threshold = 75
  combinedAngle = 0
  detectedBoids = 0
  for i in [0..20]
    boid = boids.eq(i)
    distanceToBoid = me.distance(boid)
    if distanceToBoid > 0 and distanceToBoid < threshold
      combinedAngle += boid.direction()
      detectedBoids++
  newHeading = 
    if detectedBoids is 0
      me.direction() 
    else (combinedAngle/detectedBoids)
  #me.label detectedBoids + ":" + (newHeading.toFixed 0), fontSize: 20, labelSide: 'bottom'
  return newHeading

Angle = (me,angle,turnSpeed) ->
  #me.label (angle.toFixed 0) + ":" + (me.direction().toFixed 0), fontSize: 20, labelSide: 'bottom'
  return Math.sign(angle-me.direction()) * turnSpeed

tick 2, ->
  do cg
  boids.plan -> 
    avoidanceHeading = AvoidanceSense @,boids
    centerHeading = CenterSense @,boids
    copyHeading = CopySense @,boids
    combinedHeading = avoidanceHeading*.7 + centerHeading*.1 +  copyHeading*2
    if not @inside(window)
      @rt 180
      [x,y] = @getxy()
      newX = if Math.sign(x) > 0 then -50 else 50
      newY = if Math.sign(y) > 0 then -50 else 50
      @movexy newX,newY
    else
      @rt Angle(@,combinedHeading,2)
    @fd 1
    #this.label $.fx.speeds.turtle,fontSize: 20, labelSide: 'bottom'

