#adapted from http://www.mscroggs.co.uk/menace 

wins = [
    [0,1,2],
    [3,4,5],
    [6,7,8],
    [0,3,6],
    [1,4,7],
    [2,5,8],
    [0,4,8],
    [6,4,2]
]
rotations=[
    [0,1,2,3,4,5,6,7,8],
    [0,3,6,1,4,7,2,5,8],
    [6,3,0,7,4,1,8,5,2],
    [6,7,8,3,4,5,0,1,2],
    [8,7,6,5,4,3,2,1,0],
    [8,5,2,7,4,1,6,3,0],
    [2,5,8,1,4,7,0,3,6],
    [2,1,0,5,4,3,8,7,6]
]
[win,lose,draw] = [3,-1,1]

scores = [0,0,0]
scoreBoard = table 2,3
scoreBoard.cell(0,0).text '1 WINS'
scoreBoard.cell(0,1).text 'DRAW'
scoreBoard.cell(0,2).text '2 WINS'
board = []
turn = 0

menace = {
 0:{
    "boxes":{},
    "moves":[],
    "player":1},
 1:{
    "boxes":{},
    "moves":[],
    "player":2}
}


playHuman = true
button 'AutoPlay', ->
  #playHuman = not playHuman
  Play(1)
  Play(0)
  
grid = table 3, 3,
  {width: 48, height: 48, font: "32px Arial Black", background: "wheat"}
grid.home()

grid.cell().click ->
  move = grid.cell().index this
  board[move] = 2
  $(this).text 'X'
  Play(0)

ApplyRotation = (position,rotation,i) ->
  newPosition = ""
  for j in [0..8]
    newPosition += position[rotation[j]]
  return { pos: newPosition, index: i }
  
MakeBox = (player,pos) ->
  box = []
  for i in [0..8]
    if pos[i] is "0"
      for [0..10]
        box.push(i)
  menace[player]["boxes"][pos] = box  

MenaceMove = (thisMenace) ->
  move = 0
  #only one place left to go
  if turn is 8
    move = board.findIndex (x) -> x is 0
    #write 'one space left, must go ' + move
  else
    rotatedBoards = ( ApplyRotation(board.join(""),r,i) for r,i in rotations  )
    normalBoard = (rotatedBoards.sort (a, b) -> b.pos - a.pos)[0]
    if not menace[thisMenace]["boxes"][normalBoard.pos]?
      MakeBox(thisMenace,normalBoard.pos)
    normalMoves = menace[thisMenace]["boxes"][normalBoard.pos]
    if normalMoves.length is 0 
      return "resign"
    normalMove = normalMoves[random normalMoves.length]
    menace[thisMenace]["moves"].push([normalBoard.pos,normalMove])
    move = rotations[normalBoard.index][normalMove]
  return move
  
  
GameOver = (move,thisMenace) ->
  if move is "resign"
    #write 'resign'
    return [true,not thisMenace + 0]

  for win in wins
    if board[win[0]] and board[win[0]] is board[win[1]] is board[win[2]]
      #write 'win by ' + board[win[0]]-1
      return [true,board[win[0]]-1]

  if turn is 8
    #write 'draw'
    return [true,"draw"]
    
  return [false,null]
  
LearnPositive = (thisMenace,strength) ->
  for [pos,move] in menace[thisMenace].moves
    for [1..strength]
      menace[thisMenace]["boxes"][pos].push(move)
    
LearnNegative = (thisMenace,strength) ->
  for [pos,move] in menace[thisMenace].moves
    for [1..strength]
      index = menace[thisMenace]["boxes"][pos].indexOf(move)
      if index isnt -1
        menace[thisMenace]["boxes"][pos].splice(index, 1) 
      
Learn = (winner) ->
  if winner is "draw" 
    LearnPositive(0,draw)
    LearnPositive(1,draw)
  else if winner is 0 
    LearnPositive(0,win)
    LearnNegative(1,lose)
  else
    LearnNegative(0,lose)
    LearnPositive(1,win)
    
ScoreBoard = (winner) ->
  if winner is "draw" 
    scores[1]++
    scoreBoard.cell(1,1).text scores[1]
  else if winner is 0 
    scores[0]++
    scoreBoard.cell(1,0).text scores[0]
  else
    scores[2]++
    scoreBoard.cell(1,2).text scores[2]
    
Play = (thisMenace) ->
  move = MenaceMove(thisMenace)
  #write 'menace (' + thisMenace + ') ' + move
  
  if move isnt "resign"
    board[move] = menace[thisMenace].player
    grid.cell().eq(move).text ( if thisMenace is 0 then 'O' else 'X' )
  
  [gameOver,winner] = GameOver(move,thisMenace)
  if gameOver
    Learn(winner)
    ScoreBoard(winner)
    await setTimeout defer(), 1000
    GameReset()
    
  turn++

  #if not playHuman
  #  write 'autoplay'
  #  Play(not thisMenace + 0)
  #  setTimeout(Play(not thisMenace + 0), 1000)
    
GameReset = () ->
  menace[0]["moves"] = []
  menace[1]["moves"] = []
  board = (0 for [0..8])
  for i in [0..8] 
    grid.cell().eq(i).text ''
  turn = 0
  Play(0)

  
GameReset()



