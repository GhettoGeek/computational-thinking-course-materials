documents = ['I AM SAM I AM SAM SAM I AM','THAT SAM I AM THAT SAM I AM I DO NOT LIKE THAT SAM I AM','DO WOULD YOU LIKE GREEN EGGS AND HAM','I DO NOT LIKE THEM SAM I AM I DO NOT LIKE GREEN EGGS AND HAM','WOULD YOU LIKE THEM HERE OR THERE','I WOULD NOT LIKE THEM HERE OR THERE I WOULD NOT LIKE THEM ANYWHERE I DO NOT LIKE GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','WOULD YOU LIKE THEM IN A HOUSE WOULD YOU LIKE THEN WITH A MOUSE','I DO NOT LIKE THEM IN A HOUSE I DO NOT LIKE THEM WITH A MOUSE I DO NOT LIKE THEM HERE OR THERE I DO NOT LIKE THEM ANYWHERE I DO NOT LIKE GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','WOULD YOU EAT THEM IN A BOX WOULD YOU EAT THEM WITH A FOX','NOT IN A BOX NOT WITH A FOX NOT IN A HOUSE NOT WITH A MOUSE I WOULD NOT EAT THEM HERE OR THERE I WOULD NOT EAT THEM ANYWHERE I WOULD NOT EAT GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','WOULD YOU COULD YOU IN A CAR EAT THEM EAT THEM HERE THEY ARE','I WOULD NOT COULD NOT IN A CAR','YOU MAY LIKE THEM YOU WILL SEE YOU MAY LIKE THEM IN A TREE','I WOULD NOT COULD NOT IN A TREE NOT IN A CAR YOU LET ME BE I DO NOT LIKE THEM IN A BOX I DO NOT LIKE THEM WITH A FOX I DO NOT LIKE THEM IN A HOUSE I DO NOT LIKE THEM WITH A MOUSE I DO NOT LIKE THEM HERE OR THERE I DO NOT LIKE THEM ANYWHERE I DO NOT LIKE GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','A TRAIN A TRAIN A TRAIN A TRAIN COULD YOU WOULD YOU ON A TRAIN','NOT ON TRAIN NOT IN A TREE NOT IN A CAR SAM LET ME BE I WOULD NOT COULD NOT IN A BOX I WOULD NOT COULD NOT WITH A FOX I WILL NOT EAT THEM IN A HOUSE I WILL NOT EAT THEM HERE OR THERE I WILL NOT EAT THEM ANYWHERE I DO NOT EAT GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','SAY IN THE DARK HERE IN THE DARK WOULD YOU COULD YOU IN THE DARK','I WOULD NOT COULD NOT IN THE DARK','WOULD YOU COULD YOU IN THE RAIN','I WOULD NOT COULD NOT IN THE RAIN NOT IN THE DARK NOT ON A TRAIN NOT IN A CAR NOT IN A TREE I DO NOT LIKE THEM SAM YOU SEE NOT IN A HOUSE NOT IN A BOX NOT WITH A MOUSE NOT WITH A FOX I WILL NOT EAT THEM HERE OR THERE I DO NOT LIKE THEM ANYWHERE','YOU DO NOT LIKE GREEN EGGS AND HAM','I DO NOT LIKE THEM SAM I AM','COULD YOU WOULD YOU WITH A GOAT','I WOULD NOT COULD NOT WITH A GOAT','WOULD YOU COULD YOU ON A BOAT','I COULD NOT WOULD NOT ON A BOAT I WILL NOT WILL NOT WITH A GOAT I WILL NOT EAT THEM IN THE RAIN NOT IN THE DARK NOT IN A TREE NOT IN A CAR YOU LET ME BE I DO NOT LIKE THEM IN A BOX I DO NOT LIKE THEM WITH A FOX I WILL NOT EAT THEM IN A HOUSE I DO NOT LIKE THEM WITH A MOUSE I DO NOT LIKE THEM HERE OR THERE I DO NOT LIKE THEM ANYWHERE I DO NOT LIKE GREEN EGGS AND HAM I DO NOT LIKE THEM SAM I AM','YOU DO NOT LIKE THEM SO YOU SAY TRY THEM TRY THEM AND YOU MAY TRY THEM AND YOU MAY I SAY','SAM IF YOU LET ME BE I WILL TRY THEM YOU WILL SEE','SAY I LIKE GREEN EGGS AND HAM I DO I LIKE THEM SAM I AM AND I WOULD EAT THEM IN A BOAT AND I WOULD EAT THEM WITH A GOAT AND I WILL EAT THEM IN THE RAIN AND IN THE DARK AND ON A TRAIN AND IN A CAR AND IN A TREE THEY ARE SO GOOD SO GOOD YOU SEE SO I WILL EAT THEM IN A BOX AND I WILL EAT THEM WITH A FOX AND I WILL EAT THEM IN A HOUSE AND I WILL EAT THEM WITH A MOUSE AND I WILL EAT THEM HERE AND THERE SAY I WILL EAT THEM ANYWHERE I DO SO LIKE GREEN EGGS AND HAM THANK YOU THANK YOU SAM I AM']
  
write 'Ex 1. Create a term document matrix'
termDocumentMatrix = {}
docCount = 0
for doc in documents
  for word in doc.split(' ')
    if not termDocumentMatrix[word]?
      termDocumentMatrix[word] = {}
    if not termDocumentMatrix[word][docCount]?
      termDocumentMatrix[word][docCount] = 1
    else
      termDocumentMatrix[word][docCount] += 1
  docCount++
type JSON.stringify(termDocumentMatrix,null,2)
  
write 'Ex 2. Query the term document matrix'
Cosine = (v1,v2,range) ->
  dotproduct = 0
  v1norm = 0
  v2norm = 0
  for i in range
    if v1[i]? and v2[i]?
      dotproduct += v1[i] * v2[i]
    if v1[i]?
      v1norm += v1[i] * v1[i]
    if v2[i]?
      v2norm += v2[i] * v2[i]
  return dotproduct / (Math.sqrt(v1norm) * Math.sqrt(v2norm))
DoWordQueries = () ->
  range = [0..docCount]
  write 'Cosine of MAY and GOOD ' + Cosine(termDocumentMatrix['MAY'],termDocumentMatrix['GOOD'],range)
  write 'Cosine of THANK and GOOD ' + Cosine(termDocumentMatrix['THANK'],termDocumentMatrix['GOOD'],range)
  write 'Cosine of GOAT and HOUSE ' + Cosine(termDocumentMatrix['GOAT'],termDocumentMatrix['HOUSE'],range)
  write 'Cosine of A and DARK ' + Cosine(termDocumentMatrix['A'],termDocumentMatrix['DARK'],range)
DoWordQueries()

write 'Ex 3. Transform the matrix using TF.IDF'
for word,vector of termDocumentMatrix
  for documentId,count of vector
    termDocumentMatrix[word][documentId] = (1 + Math.log10(count))*Math.log10(docCount/Object.keys(vector).length)
type JSON.stringify(termDocumentMatrix,null,2)
DoWordQueries()

write 'Ex 4. Do document search'
documentTermMatrix = {}
for word,vector of termDocumentMatrix
  for documentId,count of vector
    if not documentTermMatrix[documentId]?
      documentTermMatrix[documentId] = {}
    documentTermMatrix[documentId][word] = count
type JSON.stringify(documentTermMatrix,null,2)
DocumentSearch = (query,n) ->
  queryVector = {}
  for word in query.split(' ')
    queryVector[word] = 1
  scores = []
  for docId,docVector of documentTermMatrix
    score = Cosine(queryVector,docVector,Object.keys(termDocumentMatrix))
    scores.push( {score:score,document:documents[docId]} )
  scores.sort (a, b) -> b.score - a.score
  return scores[0..n]
query = "CAR"
type "Document search results for " + query + ":" + JSON.stringify(DocumentSearch(query,5),null,2)

write 'Ex 5. Run Word2Vec'
ex5_link = 'https://umdrive.memphis.edu/aolney/public/pencilcode/word2vec/index.html'
LaunchLink = (link) ->
  $('<iframe src=' + link + ' width=900px height=1000px></iframe>').appendTo('body');
LaunchLink( ex5_link )

